Points to note:
	1- cluster numbering should start from 0;
	2- in getWeightedTime, the clusterNumber is used to differentiate between bdry pts of different clusters.
	3- for every cluster, bdry points should have the starting ids
	
	4- nodes_adjacency file format:
		num_nodes
		<neighbour(1)ID of node1> <neighbour(2)ID of node1> <neighbour(3)ID of node1> . . . <neighbour(num_neighbours_of_node1)ID of node1>
		<neighbour(1)ID of node2> <neighbour(2)ID of node2> <neighbour(3)ID of node2> . . . <neighbour(num_neighbours_of_node2)ID of node2>
		.	.	.
		.	.	.
		.	.	.
		<neighbour(1)ID of node(num_nodes)> <neighbour(2)ID of node(num_nodes)> <neighbour(3)ID of node(num_nodes)> . . . <neighbour(num_neighbours_of_node(num_nodes))ID of node(num_nodes)>
	
	5- speeds file format:
		num_intervals	end_time	//start time is assumed 0
		dist_of_edge speed(1) speed(2) ..... speed(num_intervals)
		dist_of_edge speed(1) speed(2) ..... speed(num_intervals)
		.	.	.
		.	.	.
		.	.	.
	6- clusters file format is
		cluster_num of node1
		cluster_num of node2
		.
		.
		.
		.
	7- examples clusters file:
		1
		0
		0
		0
		1
		2
		2
		1
		
	8- run the program like:
		make
		java checker <nodesFile> <parts> <speedsFile>
	
	9- 2 variable show the time memory accuracy relationship:
		 - store_time_diff:
		 		can be changed in config.properties file.
		 		represents the time gap after which the time taken are stores between intra nodes and between the bdry points.
		 		lesser the value, more is space required and more time required to construct the times table but more accurate result and vice versa.
		 - parts:
		 		given as input argument number 2 (first is nodes file)
		 		represents the number of clusters into which the nodes are divided.
		 		very low(~1) and very high(~number of nodes) values behave similarly... high memory and more time to construct the tables requirements but less time to answer
		 		medium values.. less memory and less time to construct tables but more time to answer the queries.
		 		
	10- The input while running the program is of 3 types:
		- (-1): stops the program
		
		- (1 <List of integers representing a route> -1 <currentTime>): you can ask about the time it takes to traverse the route at currentTime. (To see whether the result given in next part is correct or not).
		
		- (2 <node id 1> <node id 2> <currentTime>): calculates the min_time from node1 to node2 as well as the route to be taken.
		
		Note:
		The ids to be input are the same as that given in the nodes_adjacency file (i.e. start from 1).